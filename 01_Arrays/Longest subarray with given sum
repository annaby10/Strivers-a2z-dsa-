Prefix Sum approach:

import java.util.HashMap;

public class LongestSubarrayWithSumK {
    public static int longestSubarray(int[] arr, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int prefixSum = 0;
        int maxLen = 0;

        for (int i = 0; i < arr.length; i++) {
            prefixSum += arr[i];

            // Case 1: Subarray from start
            if (prefixSum == k) {
                maxLen = i + 1;
            }

            // Case 2: Subarray ending at i
            if (map.containsKey(prefixSum - k)) {
                int prevIndex = map.get(prefixSum - k);
                maxLen = Math.max(maxLen, i - prevIndex);
            }

            // Store only first occurrence
            if (!map.containsKey(prefixSum)) {
                map.put(prefixSum, i);
            }
        }

        return maxLen;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, -2, 5, -3, 1, 1};
        int k = 5;
        int result = longestSubarray(arr, k);
        System.out.println("Length of the longest subarray: " + result);
    }
}
