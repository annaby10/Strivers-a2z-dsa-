public class StackLinkedList {

    static class Node {
        int data;
        Node next;
        Node(int data) {
            this.data = data;
        }
    }

    static class Stack {
        Node top;

        public boolean isEmpty() {
            return top == null;
        }

        public void push(int data) {
            Node newNode = new Node(data);
            newNode.next = top;
            top = newNode;
        }

        public int pop() {
            if (isEmpty()) {
                System.out.println("Stack Underflow");
                return -1;
            }
            int popped = top.data;
            top = top.next;
            return popped;
        }

        public int peek() {
            if (isEmpty()) {
                System.out.println("Stack is empty!");
                return -1;
            }
            return top.data;
        }

        // âœ… Push at bottom using recursion
        public void pushAtBottom(int data) {
            if (isEmpty()) {
                push(data);
                return;
            }
            int topData = pop(); // remove top
            pushAtBottom(data);  // insert at bottom
            push(topData);       // rebuild stack
        }

        // Optional: print stack for debug
        public void printStack() {
            Node temp = top;
            System.out.print("Top -> ");
            while (temp != null) {
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Stack s = new Stack();

        s.push(1);
        s.push(2);
        s.push(3);

        s.printStack(); // Top -> 3 2 1

        s.pushAtBottom(0);

        s.printStack(); // Top -> 3 2 1 0
    }
}
